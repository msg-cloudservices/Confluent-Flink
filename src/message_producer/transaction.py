from dataclasses import dataclass
from typing import Optional


@dataclass
class TransactionRecord:
    TransactionID: int 
    TransactionAmt: float
    ProductCD: str
    card1: int
    card2: Optional[float]
    card3: Optional[float]
    card4: str
    card5: Optional[float]
    card6: str
    addr1: Optional[float]
    addr2: Optional[float]
    dist1: Optional[float]
    dist2: Optional[float]
    P_emaildomain: str
    R_emaildomain: str
    C1: float
    C2: float
    C3: float
    C4: float
    C5: float
    C6: float
    C7: float
    C8: float
    C9: float
    C10: float
    C11: float
    C12: float
    C13: float
    C14: float
    D1: float
    D2: Optional[float]
    D3: float
    D4: Optional[float]
    D5: Optional[float]
    D10: Optional[float]
    D11: Optional[float]
    D15: Optional[float]
    M1: str
    M2: str
    M3: str
    M4: str
    M5: str
    M6: str
    M7: str
    M8: str
    M9: str
    V1: Optional[float]
    V2: Optional[float]
    V3: Optional[float]
    V4: Optional[float]
    V5: Optional[float]
    V6: Optional[float]
    V7: Optional[float]
    V8: Optional[float]
    V9: Optional[float]
    V10: Optional[float]
    V11: Optional[float]
    V12: Optional[float]
    V13: Optional[float]
    V14: Optional[float]
    V15: Optional[float]
    V16: Optional[float]
    V17: Optional[float]
    V18: Optional[float]
    V19: Optional[float]
    V20: Optional[float]
    V21: Optional[float]
    V22: Optional[float]
    V23: Optional[float]
    V24: Optional[float]
    V25: Optional[float]
    V26: Optional[float]
    V27: Optional[float]
    V28: Optional[float]
    V29: Optional[float]
    V30: Optional[float]
    TransactionDT: float
    Timestamp: int
    isFraud: float

    def to_dict(self) -> dict:
        return {
            # Exclude transactionID since it is processed separatly by Kafka as key and not value
            "TransactionAmt": self.TransactionAmt,
            "ProductCD": self.ProductCD,
            "card1": self.card1,
            "card2": self.card2,
            "card3": self.card3,
            "card4": self.card4,
            "card5": self.card5,
            "card6": self.card6,
            "addr1": self.addr1,
            "addr2": self.addr2,
            "dist1": self.dist1,
            "dist2": self.dist2,
            "P_emaildomain": self.P_emaildomain,
            "R_emaildomain": self.R_emaildomain,
            "C1": self.C1,
            "C2": self.C2,
            "C3": self.C3,
            "C4": self.C4,
            "C5": self.C5,
            "C6": self.C6,
            "C7": self.C7,
            "C8": self.C8,
            "C9": self.C9,
            "C10": self.C10,
            "C11": self.C11,
            "C12": self.C12,
            "C13": self.C13,
            "C14": self.C14,
            "D1": self.D1,
            "D2": self.D2,
            "D3": self.D3,
            "D4": self.D4,
            "D5": self.D5,
            "D10": self.D10,
            "D11": self.D11,
            "D15": self.D15,
            "M1": self.M1,
            "M2": self.M2,
            "M3": self.M3,
            "M4": self.M4,
            "M5": self.M5,
            "M6": self.M6,
            "M7": self.M7,
            "M8": self.M8,
            "M9": self.M9,
            **{f"V{i}": getattr(self, f"V{i}") for i in range(1, 31)},
            "TransactionDT": self.TransactionDT,
            "Timestamp": self.Timestamp,
            "isFraud": self.isFraud,
        }
