import os
import logging
import json

import onnxruntime as rt
import numpy as np



def init():

    global session

    model_name = "pipeline"

    # use AZUREML_MODEL_DIR to get your deployed model(s). If multiple models are deployed, 
    # model_path = os.path.join(os.getenv('AZUREML_MODEL_DIR'), '$MODEL_NAME/$VERSION/$MODEL_FILE_NAME')
    model_dir = os.getenv('AZUREML_MODEL_DIR')
    model_path = os.path.join(model_dir, model_name + ".onnx")

    session = rt.InferenceSession(model_path, providers=["CPUExecutionProvider"])

def run(raw_input):
    logging.info("Input: " + raw_input)

    # columns = [
    #     'TransactionID', 'TransactionDT', 'TransactionAmt', 'ProductCD', 'card1', 'card2', 'card3', 'card4', 
    #     'card5', 'card6', 'addr1', 'addr2', 'P_emaildomain', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 
    #     'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'D1', 'D4', 'D10', 'D15', 'M6', 'V12', 'V13', 'V14', 'V15', 
    #     'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'V29', 
    #     'V30', 'V31', 'V32', 'V33', 'V34', 'V35', 'V36', 'V37', 'V38', 'V39', 'V40', 'V41', 'V42', 'V43', 
    #     'V44', 'V45', 'V46', 'V47', 'V48', 'V49', 'V50', 'V51', 'V52', 'V53', 'V54', 'V55', 'V56', 'V57', 
    #     'V58', 'V59', 'V60', 'V61', 'V62', 'V63', 'V64', 'V65', 'V66', 'V67', 'V68', 'V69', 'V70', 'V71', 
    #     'V72', 'V73', 'V74', 'V75', 'V76', 'V77', 'V78', 'V79', 'V80', 'V81', 'V82', 'V83', 'V84', 'V85', 
    #     'V86', 'V87', 'V88', 'V89', 'V90', 'V91', 'V92', 'V93', 'V94', 'V95', 'V96', 'V97', 'V98', 'V99', 
    #     'V100', 'V101', 'V102', 'V103', 'V104', 'V105', 'V106', 'V107', 'V108', 'V109', 'V110', 'V111', 'V112', 
    #     'V113', 'V114', 'V115', 'V116', 'V117', 'V118', 'V119', 'V120', 'V121', 'V122', 'V123', 'V124', 'V125', 
    #     'V126', 'V127', 'V128', 'V129', 'V130', 'V131', 'V132', 'V133', 'V134', 'V135', 'V136', 'V137', 'V279', 
    #     'V280', 'V281', 'V282', 'V283', 'V284', 'V285', 'V286', 'V287', 'V288', 'V289', 'V290', 'V291', 'V292', 
    #     'V293', 'V294', 'V295', 'V296', 'V297', 'V298', 'V299', 'V300', 'V301', 'V302', 'V303', 'V304', 'V305', 
    #     'V306', 'V307', 'V308', 'V309', 'V310', 'V311', 'V312', 'V313', 'V314', 'V315', 'V316', 'V317', 'V318', 
    #     'V319', 'V320', 'V321', 'DT_D', 'DT_W', 'DT_M', 'id_01', 'id_02', 'id_05', 'id_06', 'id_11', 'id_12', 
    #     'id_13', 'id_15', 'id_16', 'id_17', 'id_19', 'id_20', 'id_28', 'id_29', 'id_31', 'id_35', 'id_36', 'id_37', 
    #     'id_38', 'DeviceType', 'DeviceInfo'
    # ]

    # # JSON string (for demonstration purposes)
    # json_string = '''
    # {
    #   "TransactionID": 3357788.0,
    #   "TransactionDT": 9228284.0,
    #   "TransactionAmt": 10.392,
    #   "ProductCD": "C",
    #   "card1": 9633.0,
    #   "card2": 130.0,
    #   "card3": 185.0,
    #   "card4": "visa",
    #   "card5": 138.0,
    #   "card6": "debit",
    #   "addr1": null,
    #   "addr2": null,
    #   "P_emaildomain": "icloud.com",
    #   "C1": 4.0,
    #   "C2": 5.0,
    #   "C3": 0.0,
    #   "C4": 2.0,
    #   "C5": 0.0,
    #   "C6": 2.0,
    #   "C7": 2.0,
    #   "C8": 2.0,
    #   "C9": 0.0,
    #   "C10": 3.0,
    #   "C11": 1.0,
    #   "C12": 1.0,
    #   "C13": 1.0,
    #   "C14": 1.0,
    #   "D1": 0.0,
    #   "D4": 0.0,
    #   "D10": 0.0,
    #   "D15": 150.0,
    #   "M6": null,
    #   "V12": 0.0,
    #   "V13": 0.0,
    #   "V14": 1.0,
    #   "V15": 1.0,
    #   "V16": 1.0,
    #   "V17": 1.0,
    #   "V18": 1.0,
    #   "V19": 1.0,
    #   "V20": 1.0,
    #   "V21": 1.0,
    #   "V22": 1.0,
    #   "V23": 1.0,
    #   "V24": 1.0,
    #   "V25": 1.0,
    #   "V26": 1.0,
    #   "V27": 0.0,
    #   "V28": 0.0,
    #   "V29": 0.0,
    #   "V30": 0.0,
    #   "V31": 1.0,
    #   "V32": 1.0,
    #   "V33": 1.0,
    #   "V34": 1.0,
    #   "V35": 0.0,
    #   "V36": 0.0,
    #   "V37": 2.0,
    #   "V38": 2.0,
    #   "V39": 1.0,
    #   "V40": 1.0,
    #   "V41": 1.0,
    #   "V42": 2.0,
    #   "V43": 2.0,
    #   "V44": 2.0,
    #   "V45": 2.0,
    #   "V46": 1.0,
    #   "V47": 1.0,
    #   "V48": 0.0,
    #   "V49": 0.0,
    #   "V50": 1.0,
    #   "V51": 1.0,
    #   "V52": 1.0,
    #   "V53": 0.0,
    #   "V54": 0.0,
    #   "V55": 2.0,
    #   "V56": 2.0,
    #   "V57": 2.0,
    #   "V58": 2.0,
    #   "V59": 2.0,
    #   "V60": 2.0,
    #   "V61": 2.0,
    #   "V62": 2.0,
    #   "V63": 2.0,
    #   "V64": 2.0,
    #   "V65": 1.0,
    #   "V66": 1.0,
    #   "V67": 1.0,
    #   "V68": 0.0,
    #   "V69": 0.0,
    #   "V70": 0.0,
    #   "V71": 2.0,
    #   "V72": 2.0,
    #   "V73": 1.0,
    #   "V74": 1.0,
    #   "V75": 0.0,
    #   "V76": 0.0,
    #   "V77": 2.0,
    #   "V78": 2.0,
    #   "V79": 1.0,
    #   "V80": 1.0,
    #   "V81": 1.0,
    #   "V82": 1.0,
    #   "V83": 1.0,
    #   "V84": 1.0,
    #   "V85": 1.0,
    #   "V86": 2.0,
    #   "V87": 2.0,
    #   "V88": 1.0,
    #   "V89": 0.0,
    #   "V90": 0.0,
    #   "V91": 0.0,
    #   "V92": 1.0,
    #   "V93": 1.0,
    #   "V94": 1.0,
    #   "V95": 0.0,
    #   "V96": 0.0,
    #   "V97": 0.0,
    #   "V98": 0.0,
    #   "V99": 0.0,
    #   "V100": 0.0,
    #   "V101": 0.0,
    #   "V102": 0.0,
    #   "V103": 0.0,
    #   "V104": 0.0,
    #   "V105": 0.0,
    #   "V106": 0.0,
    #   "V107": 1.0,
    #   "V108": 1.0,
    #   "V109": 1.0,
    #   "V110": 1.0,
    #   "V111": 1.0,
    #   "V112": 1.0,
    #   "V113": 1.0,
    #   "V114": 1.0,
    #   "V115": 1.0,
    #   "V116": 1.0,
    #   "V117": 1.0,
    #   "V118": 1.0,
    #   "V119": 1.0,
    #   "V120": 1.0,
    #   "V121": 1.0,
    #   "V122": 1.0,
    #   "V123": 1.0,
    #   "V124": 1.0,
    #   "V125": 1.0,
    #   "V126": 0.0,
    #   "V127": 0.0,
    #   "V128": 0.0,
    #   "V129": 0.0,
    #   "V130": 0.0,
    #   "V131": 0.0,
    #   "V132": 0.0,
    #   "V133": 0.0,
    #   "V134": 0.0,
    #   "V135": 0.0,
    #   "V136": 0.0,
    #   "V137": 0.0,
    #   "V279": 1.0,
    #   "V280": 1.0,
    #   "V281": 1.0,
    #   "V282": 2.0,
    #   "V283": 2.0,
    #   "V284": 1.0,
    #   "V285": 1.0,
    #   "V286": 0.0,
    #   "V287": 1.0,
    #   "V288": 1.0,
    #   "V289": 1.0,
    #   "V290": 2.0,
    #   "V291": 2.0,
    #   "V292": 2.0,
    #   "V293": 0.0,
    #   "V294": 0.0,
    #   "V295": 0.0,
    #   "V296": 0.0,
    #   "V297": 0.0,
    #   "V298": 0.0,
    #   "V299": 0.0,
    #   "V300": 0.0,
    #   "V301": 0.0,
    #   "V302": 2.0,
    #   "V303": 2.0,
    #   "V304": 2.0,
    #   "V305": 1.0,
    #   "V306": 42.7774,
    #   "V307": 42.7774,
    #   "V308": 42.7774,
    #   "V309": 42.7774,
    #   "V310": 42.7774,
    #   "V311": 0.0,
    #   "V312": 42.7774,
    #   "V313": 42.7774,
    #   "V314": 42.7774,
    #   "V315": 42.7774,
    #   "V316": 0.0,
    #   "V317": 0.0,
    #   "V318": 0.0,
    #   "V319": 0.0,
    #   "V320": 0.0,
    #   "V321": 0.0,
    #   "DT_D": 440.0,
    #   "DT_W": 56.0,
    #   "DT_M": 15.0,
    #   "id_01": -15.0,
    #   "id_02": 84435.0,
    #   "id_05": -4.0,
    #   "id_06": -6.0,
    #   "id_11": 100.0,
    #   "id_12": "NotFound",
    #   "id_13": 52.0,
    #   "id_15": "Found",
    #   "id_16": "Found",
    #   "id_17": 225.0,
    #   "id_19": 266.0,
    #   "id_20": 325.0,
    #   "id_28": "Found",
    #   "id_29": "Found",
    #   "id_31": "chrome generic",
    #   "id_35": "F",
    #   "id_36": "F",
    #   "id_37": "T",
    #   "id_38": "F",
    #   "DeviceType": "desktop",
    #   "DeviceInfo": "Windows"
    # }
    # '''

    # Parse JSON
    parsed_input = json.loads(raw_input)

    # Function to convert back to original format
    def convert_json_to_numpy_dict(data):
        result = {}
        for key, value in data.items():
            if isinstance(value, str):
                result[key] = np.array([[value]], dtype=object)
            elif value is None:
                result[key] = np.array([[np.nan]], dtype=np.float32)
            else:
                result[key] = np.array([[value]], dtype=np.float32)
        return result

    # Convert back to the original format
    parsed_input = convert_json_to_numpy_dict(parsed_input)

    pred_onx = session.run(None, parsed_input)

    logging.info(f"Predictin Label: {pred_onx[0]}; Prediction Prob: {pred_onx[1]}")

    return pred_onx[0].tolist()

